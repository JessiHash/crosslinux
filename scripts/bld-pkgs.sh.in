#!@@CL_BASH@@


# This file is part of the crosslinux software.
# The license which this software falls under is GPLv2 as follows:
#
# Copyright (C) 2013-2013 Douglas Jerome <djerome@crosslinux.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA


# *****************************************************************************
#
# PROGRAM DESCRIPTION
#
#      This script builds the crosslinux target packages.
#
# CHANGE LOG
#
#      2013-06-22  drj  Adapted to crosslinux from the ttylinux build system.
#
# *****************************************************************************


# *************************************************************************** #
#                                                                             #
# F I L T E R E D   C O N S T A N T S                                         #
#                                                                             #
# *************************************************************************** #

cl_libdir="@@CL_LIBDIR@@"


# *************************************************************************** #
#                                                                             #
# F U N C T I O N S                                                           #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Cleanup any built and in-progress package build.
# *****************************************************************************

package_clean() {

echo "=> Removing the packages:"

echo "   -> Removing left-over build directory contents."
rm --force --recursive "${TARGET_BLD_DIR}/"*

echo "   -> Removing build logs."
for _file in "${TARGET_LOG_DIR}/"*; do
	[[ ! -f "${_file}" ]] && continue || true
	if [[ ${_file##*/} =~ ^linux- ]]; then
		:
	else
		echo "   -> ... ${_file##*/}."
		rm --force ${_file}
	fi
done

echo "   -> Removing done.* build flags."
rm --force --recursive ${TARGET_RUN_DIR}/done.*
unset _file

echo "   -> Removing sysroot contents."
rm --force --recursive "${TARGET_SYSROOT_DIR}/"*

echo "   -> Removing binary packages."
rm --force --recursive "${TARGET_PKGBIN_DIR}/"*

}


# *****************************************************************************
# Build a package from source.
# *****************************************************************************

# Function Arguments:
#      $1 ... Package name, like "glibc-2.19".

package_xbuild() {

echo -n "g." >&${CONSOLE_FD}

# Check for the package build script.
#
if [[ ! -f "${CROSSLINUX_PKGCFG_DIR}/$1/bld.sh" ]]; then
	CL_logcom "ERROR ***** Cannot find build script."
	CL_logcom "=> ${CROSSLINUX_PKGCFG_DIR}/$1/bld.sh"
	echo -e "${TEXT_BRED}ERROR${TEXT_NORM}"            >&${CONSOLE_FD}
	echo    "E> Cannot find build script."             >&${CONSOLE_FD}
	echo    "   => ${CROSSLINUX_PKGCFG_DIR}/$1/bld.sh" >&${CONSOLE_FD}
	exit 1 # Bust out of sub-shell.
fi

# ${CROSSLINUX_PKGCFG_DIR}/$1/bld.sh defines several variables and functions:
#
# Functions
#
#	pkg_patch	This function applies any patches or fix-ups to the
#			source package before building.
#			NOTE -- Patches are applied before package
#				configuration.
#
#	pkg_configure	This function configures the source package for
#			building.
#			NOTE -- Post-configuration patches might be applied.
#
#	pkg_make	This function builds the source package in place in the
#			${TARGET_BLD_DIR} directory
#
#	pkg_install	This function installs any built items into the build
#			root ${TARGET_SYSROOT_DIR} directory tree.
#
#	pkg_clean	This function is responsible for cleaning-up; notice
#			it is not called if one of the other functions
#			returns an error.
#
# Variables
#
#	PKG_ZIP		The name of the source package tar-zip file.
#
#	PKG_TAR		The name of the unzipped source package file.  This
#			file name will end in ".tar".
#
#	PKG_DIR		The name of the directory created by untarring the
#			${PKG_TAR} file.
#
#	PKG_STATUS	Set by the above function to indicate an error worthy
#			stopping the build process.
#
unset pkg_patch
unset pkg_configure
unset pkg_make
unset pkg_install
unset pkg_clean
source "${CROSSLINUX_PKGCFG_DIR}/$1/bld.sh"

# Get the source package, if any.  This function will unzip and untar the
# source package.
#
[[ "x${PKG_ZIP}" == "x(none)" ]] || CL_package_get ${PKG_ZIP}

# Figure the number of parallel jobs to give to make.
#
_bitch=${K_NCPU:-1}
[[ -z "${_bitch//[0-9]}" ]] && NJOBS=$((${_bitch:-1} + 1)) || NJOBS=2
unset _bitch
[[ x"${CONFIG_PARALLEL_JOBS:-}" == x"y" ]] || NJOBS=1

# Patch, configure, and build.
#
PKG_STATUS=""
echo -n "b." >&${CONSOLE_FD}
[[ -z "${PKG_STATUS}" ]] && pkg_patch     "$1"
[[ -z "${PKG_STATUS}" ]] && pkg_configure "$1"
[[ -z "${PKG_STATUS}" ]] && pkg_make      "$1"
unset NJOBS
if [[ -n "${PKG_STATUS}" ]]; then
	CL_logcom "ERROR ***** ${PKG_STATUS}"
	echo -e "${TEXT_BRED}ERROR${TEXT_NORM}" >&${CONSOLE_FD}
	echo    "E> ${PKG_STATUS}"              >&${CONSOLE_FD}
	exit 1 # Bust out of sub-shell.
fi
unset PKG_STATUS

}


# *************************************************************************** #
#                                                                             #
# M A I N   P R O G R A M                                                     #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Set up the shell functions and environment variables.
# *****************************************************************************

declare -a K_PACKAGE=("") # Make an indexed array.

K_PKGLIST="crosslinux-pkglst.txt"
K_ZIPP="" # This is a mechanism to skip already-built packages.

source ./crosslinux-config.sh # target build configuration
source ${cl_libdir}/scripts/_constants.sh # build support
source ${cl_libdir}/scripts/_functions.sh # build support
CL_infoSigExit=1 # Print info on unexpected exit.

CL_config_setup || {
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
}


# *****************************************************************************
# Main Program
# *****************************************************************************

# Check for a script argument:
#
# $1 == "continue" ... This is a continuation flag, start making packages after
#                      the last one previously made.
#
# $1 == "clean" ...... This means to clean any package build artifacts and any
#                      in-progress package build artifacts, maybe leftover from
#                      package build problem.
#
# $1 == <name> ....... Anything other than "continue" is interpreted as a
#                      package name, so build the one named package.

_c=0  # Package count.
_p="" # Package name.

if [[ $# -gt 0 && -n "$1" ]]; then
	# "$1" may be unbound so hide it in this if statement.
	# Clean if so asked. Otherwise set the K_ZIPP flag, if so given;
	# otherwise reset the package list.
	if [[ "$1" == "clean" ]]; then
		package_clean
		CL_infoSigExit=0 # No info needed, because exit now is expected.
		exit 0
	fi
	[[ "$1" == "continue" ]] && K_ZIPP="y" || _p=$1
fi

# Need to get the list of packages from the ${K_PKGLIST} file.
while read pname pad; do
	[[ -z "${pname}"                       ]] && continue || true
	[[ "${pname:0:1}" == "#"               ]] && continue || true
	[[ -n "${_p}" && "${pname}" != "${_p}" ]] && continue || true
	K_PACKAGE[${_c}]=${pname}
	_c=$((${_c} + 1))
done <${K_PKGLIST}

if [[ ${_c} -eq 0 && -n "${_p}" ]]; then
	echo "E> No package named \"${_p}\""
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
fi

unset _c
unset _p

if [[ -z "${K_PACKAGE}" ]]; then
	echo "E> No packages to build.  How did you do that?"
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
fi

# -----------------------------------------------------------------------------
# Build Package(s)
# -----------------------------------------------------------------------------

echo ""
echo "##### START cross-building packages"
echo "g.     - getting the source and configuration packages"
echo "b.     - building the package"
echo "i.     - installing the package into sysroot"
echo "f.     - finding installed files"
echo "m_xxx. - looking for man pages to compress"
echo "s.     - running site package script"
echo "p.     - creating installable package"
echo ""

pushd "${TARGET_BLD_DIR}" >/dev/null 2>&1

if [[ $(ls -1 | wc -l) -ne 0 ]]; then
	echo "w> build directory is not empty:"
	ls -l
	echo ""
fi

T1P=${SECONDS}

for p in ${K_PACKAGE[@]}; do

	[[ -n "${K_ZIPP}" && -f "${TARGET_RUN_DIR}/done.${p}" ]] && continue

	if [[ ! -d "${CROSSLINUX_PKGCFG_DIR}/${p}" ]]; then
		echo -e "E> No ${TEXT_RED}pkg-cfg/${p}${TEXT_NORM} directory."
		echo    "=> crosslinux does not support building '${p}'"
		CL_infoSigExit=0 # No info needed, because exit now is expected.
		exit 1
	fi

	t1=${SECONDS}

	echo -n "${p} ";
	for ((i=(30-${#p}) ; i > 0 ; i--)); do echo -n "."; done
	echo -n " ";

	exec 4>&1           # Save stdout at fd 4.
	export CONSOLE_FD=4 # Export for the subshell.

	# Even with 'set +e' the trap handler will run if a command or shell
	# function returns non-zero, and in that case the trap handler also
	# will run when the subshell completes.  Set 'CL_exitOnSigErr' to zero
	# to not let the trap handler exit the shell when the subsell returns
	# an error so the return value can be checked and a message printed
	# before exiting the shell; also don't print the backtrace info because
        # it did that in the subshell.
	#
	set +e ; # Let a build step fail without exiting this script.
	CL_infoOnSigErr=0
	CL_exitOnSigErr=0
	(
	# The subshell's 'CL_infoOnSigErr' needs to be set so the trap handler
	# will print a backtrace for the subshell, if a command or shell
	# function returns non-zero.
	CL_infoOnSigErr=1
	rm --force "${TARGET_LOG_DIR}/${p}.log"
	package_xbuild "${p}" >>"${TARGET_LOG_DIR}/${p}.log" 2>&1
	fakeroot -- "${CROSSLINUX_SCRIPT_DIR}/bld-pkgs-install.sh" "${p}" \
					>>"${TARGET_LOG_DIR}/${p}.log" 2>&1
	pkg_clean
	)
	if [[ $? -ne 0 ]]; then
		echo -e "${TEXT_BRED}ERROR${TEXT_NORM}"
		echo "Check the build log files.  Probably check:"
		echo "=> ${TARGET_LOG_DIR}/${p}.log"
		CL_infoSigExit=0 # No info needed, because exit now is expected.
		exit 1
	fi
	set -e ; # All done with build steps; enable exit on a non-zero status.
	CL_infoOnSigErr=1
	CL_exitOnSigErr=1

	exec >&4     # Set fd 1 back to stdout.
	CONSOLE_FD=1 #

	>"${TARGET_RUN_DIR}/done.${p}"

	echo -n " DONE ["
	t2=${SECONDS}
	mins=$(((${t2}-${t1})/60))
	secs=$(((${t2}-${t1})%60))
	[[ ${#mins} -eq 1 ]] && echo -n " "; echo -n "${mins} minutes "
	[[ ${#secs} -eq 1 ]] && echo -n " "; echo -n "${secs} seconds"
	echo "]"

	if [[ $(ls -1 | wc -l) -ne 0 ]]; then
		echo "w> build/bld build directory is not empty:"
		ls -l
	fi

done; unset p

T2P=${SECONDS}
echo "=> $(((${T2P}-${T1P})/60)) minutes $(((${T2P}-${T1P})%60)) seconds"
echo ""

popd >/dev/null 2>&1

echo "##### DONE cross-building packages"
echo ""


# *****************************************************************************
# Exit with Status
# *****************************************************************************

CL_infoSigExit=0 # No info needed, because exit now is expected.
exit 0


# end of file
