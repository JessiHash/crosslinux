#!@@CL_BASH@@


# This file is part of the crosslinux software.
# The license which this software falls under is GPLv2 as follows:
#
# Copyright (C) 2013-2014 Douglas Jerome <djerome@crosslinux.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA


# *****************************************************************************
#
# PROGRAM DESCRIPTION
#
#      This script makes the crosslinux target source code ISO image file.
#
# CHANGE LOG
#
#      2014-04-21  drj  Use distribution file system variable name.
#      2013-07-12  drj  Adapted to crosslinux from the ttylinux build system.
#
# *****************************************************************************


# *************************************************************************** #
#                                                                             #
# F I L T E R E D   C O N S T A N T S                                         #
#                                                                             #
# *************************************************************************** #

cl_libdir="@@CL_LIBDIR@@"


# *************************************************************************** #
#                                                                             #
# F U N C T I O N S                                                           #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Get the bootloader source packages, if any.
# *****************************************************************************

loader_sources_get() {

local manifest="$1"
local destDir="${TARGET_PROJ_DIR}/target/source/loader"

local pname=""
local pad1=""
local fname=""
local pad2=""
local url=""

echo -n "i> Getting loader files, if any ...................... "

rm --force --recursive "${destDir}"
mkdir --mode=755 --parents "${destDir}"
mkdir --mode=755 --parents "${destDir}-patch"

while read pname pad1 fname pad2 url; do
	#
	[[ -z "${pname}"         ]] && continue || true
	[[ "${pname:0:1}" == "#" ]] && continue || true
	#
	cp "${DOWNLOAD_CACHE_DIR}/${fname}" "${destDir}/"
	#
	echo -n "${pname} " >>${manifest}
	for ((i=(40-${#pname}) ; i > 0 ; i--)); do
		echo -n "." >>${manifest}
	done
	echo " ${url}" >>${manifest}
	#
	for _f in ${CROSSLINUX_PKGCFG_DIR}/${pname}/patch/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" "${destDir}-patch/"
			echo "=> patch: ${_f##*/}" >>${manifest}
		fi
	done; unset _f
	#
done <"${TARGET_PROJ_DIR}/crosslinux-loader.txt"

echo "DONE"

}


# *****************************************************************************
# Get the kernel source, any patches, and configuration files.
# *****************************************************************************

kernel_sources_get() {

local manifest="$1"
local destDir="${TARGET_PROJ_DIR}/target/source/kernel"

rm --force --recursive "${destDir}"
mkdir --mode=755 --parents "${destDir}"
mkdir --mode=755 --parents "${destDir}-patch"

local K_KERNEL_SOURCE_PATH="" # rooted dirname
local K_KERNEL_SOURCE_NAME="" # like "linux-2.6.32.60"
local K_KERNEL_SOURCE_EXTN="" # like ".tar.xz"
local K_KERNEL_SOURCE_URLS="" # at lest one URL
local K_KERNEL_PATCH_PATH=""  # rooted dirname
local K_KERNEL_CONFIG=""      # rooted pathname

echo -n "i> Getting kernel, kernel config, and any patches .... "

CL_kernel_find

_kname="${K_KERNEL_SOURCE_NAME}${K_KERNEL_SOURCE_EXTN}"
_kfile="${K_KERNEL_SOURCE_PATH}/${_kname}"

cp "${_kfile}"          "${destDir}/"
cp "${K_KERNEL_CONFIG}" "${destDir}/"

echo -n "${_kname} " >>${manifest}
for ((i=(40-${#_kname}) ; i > 0 ; i--)); do
	echo -n "." >>${manifest}
done
echo " ${K_KERNEL_SOURCE_URLS}" >>${manifest}

for _f in ${K_KERNEL_PATCH_PATH}/*; do
	if [[ -f "${_f}" ]]; then
		cp "${_f}" "${destDir}-patch/"
		echo "=> patch: ${_f##*/}" >>${manifest}
	fi
done; unset _f

unset _kname
unset _kfile

echo "DONE"

}


# *****************************************************************************
# Get the libc source and patches, if any.
# *****************************************************************************

libc_sources_get() {

local manifest="$1"
local destDir="${TARGET_PROJ_DIR}/target/source/libc"

local idstr=""
local fname=""
local url=""

local libcName="" # like "glibc-2.9.tar.bz2"
local libcFile="" # rooted pathname
local libcURLS="" # at lest one URL
local libcPDir="" # rooted dirname

rm --force --recursive "${destDir}"
mkdir --mode=755 --parents "${destDir}"
mkdir --mode=755 --parents "${destDir}-patch"

echo -n "i> Getting libc, and any patches ..................... "

_target_source="${CONFIG_XTOOL_TARGET_MANIFEST_DIR}"
while read idstr fname url; do
	if [[ x"${idstr}" == x"eglibc" ]]; then
		libcName="${fname}"
		libcFile="${_target_source}/${fname}"
		libcURLS="${url}"
		libcPDir="${_target_source}/eglibc-patch"
	fi
	if [[ x"${idstr}" == x"glibc" ]]; then
		libcName="${fname}"
		libcFile="${_target_source}/${fname}"
		libcURLS="${url}"
		libcPDir="${_target_source}/glibc-patch"
	fi
	if [[ x"${idstr}" == x"uclibc" ]]; then
		libcName="${fname}"
		libcFile="${_target_source}/${fname}"
		libcURLS="${url}"
		libcPDir="${_target_source}/uClibc-patch"
	fi
done <"${_target_source}/manifest.txt"
unset _target_source

cp "${libcFile}" "${destDir}/"

echo -n "${libcName} " >>${manifest}
for ((i=(40-${#libcName}) ; i > 0 ; i--)); do
	echo -n "." >>${manifest}
done
echo " ${libcURLS}" >>${manifest}

for _f in ${libcPDir}/*; do
	if [[ -f "${_f}" ]]; then
		cp "${_f}" "${destDir}-patch/"
		echo "=> patch: ${_f##*/}" >>${manifest}
	fi
done; unset _f

echo "DONE"

}


# *****************************************************************************
# Get the source packages.
# *****************************************************************************

package_sources_get() {

local manifest="$1"
local destDir="${TARGET_PROJ_DIR}/target/source/packages"

local pname=""
local pad1=""
local fname=""
local pad2=""
local url=""

echo "i> Getting source packages:"

rm --force --recursive "${destDir}"
mkdir --mode=755 --parents "${destDir}"
mkdir --mode=755 --parents "${destDir}-patch"

while read pname pad1 fname pad2 url; do
	#
	[[ -z "${pname}"          ]] && continue || true
	[[ "${pname:0:1}" == "#"  ]] && continue || true
	[[ "${fname}" == "(none)" ]] && continue || true
	#
	cp "${DOWNLOAD_CACHE_DIR}/${fname}" "${destDir}/"
	echo "-> ${fname}"
	#
	echo -n "${pname} " >>${manifest}
	for ((i=(40-${#pname}) ; i > 0 ; i--)); do
		echo -n "." >>${manifest}
	done
	echo " ${url}" >>${manifest}
	#
	for _f in ${CROSSLINUX_PKGCFG_DIR}/${pname}/patch/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" "${destDir}-patch/"
			echo "=> patch: ${_f##*/}" >>${manifest}
		fi
	done; unset _f
	#
done <"${TARGET_PROJ_DIR}/crosslinux-pkglst.txt"

echo "DONE"

}


# *****************************************************************************
# Make an HTML manifest.
# *****************************************************************************

srclist_html_make() {

local manifest="$1"
local htmlfile="$2"

local name=""
local pad=""
local url=""

local -i urlLen=0

while read name pad url; do
	[[ -z "${name}"         ]] && continue || true
	[[ "${name:0:1}" == "#" ]] && continue || true
	[[ "${name}" == "=>"    ]] && continue || true
	if [[ ${#url} -gt ${urlLen} ]]; then
		urlLen=${#url}
	fi
done <"${manifest}"
urlLen=$((${urlLen} + 1))

while read name pad url; do
	#
	[[ -z "${name}"          ]] && continue || true
	[[ "${name:0:1}" == "#"  ]] && continue || true
	[[ "${url}" == "(local)" ]] && continue || true
	[[ "${name}" == "=>"     ]] && continue || true
	#
	echo -n "&#187; <a style=\"color:#07F\" href=\"" >>${htmlfile}
	echo -n "${url}"                                 >>${htmlfile}
	echo -n "\">"                                    >>${htmlfile}
	for ((i=(${urlLen}-${#url}) ; i > 0 ; i--)); do
		echo -n " " >>${htmlfile}
	done
	echo -n "${name} "  >>${htmlfile}
	echo    "</a><br/>" >>${htmlfile}
	#
done <"${manifest}"

mv "${htmlfile}" "${htmlfile}.in"
sort --ignore-leading-blanks --key=5,5 "${htmlfile}.in" > "${htmlfile}"
rm --force "${htmlfile}.in"

}


# *************************************************************************** #
#                                                                             #
# M A I N   P R O G R A M                                                     #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Set up the shell functions and environment variables.
# *****************************************************************************

source ./crosslinux-config.sh # target build configuration
source ${cl_libdir}/scripts/_constants.sh # build support
source ${cl_libdir}/scripts/_functions.sh # build support
CL_infoSigExit=1 # Print info on unexpected exit.

CL_config_setup || {
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
}


# *****************************************************************************
# Main Program
# *****************************************************************************

echo ""
echo "##### START getting source packages"

T1P=${SECONDS}

pushd "${TARGET_PROJ_DIR}/target/" >/dev/null 2>&1

manifest="${TARGET_PROJ_DIR}/target/source/_manifest.txt"
htmlfile="${TARGET_PROJ_DIR}/target/source/_manifest.html"

echo -n "i> Recreating source package staging directory ....... "
rm --force --recursive "${TARGET_PROJ_DIR}target/source"
mkdir --mode=755 --parents "${TARGET_PROJ_DIR}/target/source"
>"${manifest}"
>"${htmlfile}"
echo "DONE"

echo -n "i> Setting ownership and mode bits ................... "
find "${TARGET_PROJ_DIR}/target/source" -type d -exec chmod 755 {} \;
find "${TARGET_PROJ_DIR}/target/source" -type f -exec chmod 644 {} \;
echo "DONE"

loader_sources_get  "${manifest}"
kernel_sources_get  "${manifest}"
libc_sources_get    "${manifest}"
package_sources_get "${manifest}"
srclist_html_make   "${manifest}" "${htmlfile}"

echo -n "i> Creating CD-ROM ISO image ......................... "
rm --force ${TARGET_DIST_SRC_NAME}
_volid="${CONFIG_BRAND_NAME} ${CONFIG_RELEASE_VERS} ${CONFIG_BOARD}"
genisoimage				\
	-joliet				\
	-rational-rock			\
	-output ${TARGET_DIST_SRC_NAME}	\
	-volid "${_volid}"		\
	"${TARGET_PROJ_DIR}/target/source" >/dev/null 2>&1
unset _volid
echo "DONE"

_distName="${TARGET_DIST_SRC_NAME}"
echo ""
ls --color -hl ${_distName} | sed --expression="s|${TARGET_PROJ_DIR}/||"
echo ""
unset _distName

popd >/dev/null 2>&1

T2P=${SECONDS}
echo "=> $(((${T2P}-${T1P})/60)) minutes $(((${T2P}-${T1P})%60)) seconds"
echo ""

echo "##### DONE getting source packages"
echo ""


# *****************************************************************************
# Exit with Status
# *****************************************************************************

CL_infoSigExit=0 # No info needed, because exit now is expected.
exit 0


# end of file
