#!@@CL_BASH@@


# This file is part of the crosslinux software.
# The license which this software falls under is GPLv2 as follows:
#
# Copyright (C) 2013-2014 Douglas Jerome <djerome@crosslinux.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA


# *****************************************************************************
#
# PROGRAM DESCRIPTION
#
#      This script builds the crosslinux target root file system image.
#
# CHANGE LOG
#
#      2014-04-21  drj  Use root file system variable name.
#      2013-07-03  drj  Adapted to crosslinux from the ttylinux build system.
#
# *****************************************************************************


# *************************************************************************** #
#                                                                             #
# F I L T E R E D   C O N S T A N T S                                         #
#                                                                             #
# *************************************************************************** #

cl_libdir="@@CL_LIBDIR@@"


# *************************************************************************** #
#                                                                             #
# F U N C T I O N S                                                           #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Build a root file system image to use for an init RAM Disk.
# *****************************************************************************

rootfs_initrd() {

local -i nblocks=$((${CONFIG_ROOTFS_SIZE_MB} * 1024))

echo -n "i> Making root file system image for an init RAM Disk ... "
>${TARGET_MNT_DIR}/etc/.norootfsck
rm --force "${TARGET_ROOT_IRD_NAME}"
genext2fs				\
	--reserved-percentage 0		\
	--root "${TARGET_MNT_DIR}"	\
	--size-in-blocks ${nblocks}	\
	"${TARGET_ROOT_IRD_NAME}"
echo "DONE"
ls -hl ${TARGET_ROOT_IRD_NAME} | sed --expression="s|${TARGET_PROJ_DIR}/||"
echo "i> Root file system image ${TARGET_ROOT_IRD_NAME##*/} is ready."

}


# *****************************************************************************
# Make a CPIO archive to use for an initramfs.
# *****************************************************************************

rootfs_initramfs() {

echo -n "i> Making a CPIO Archive for an initramfs ... "
>${TARGET_MNT_DIR}/etc/.norootfsck
pushd "${TARGET_MNT_DIR}" >/dev/null 2>&1
rm --force "${TARGET_ROOT_IFS_NAME}"
find . | cpio		\
	--create	\
	--format=newc	\
	--no-absolute-filenames >${TARGET_ROOT_IFS_NAME}
popd >/dev/null 2>&1
echo "DONE"
ls -hl ${TARGET_ROOT_IFS_NAME} | sed --expression="s|${TARGET_PROJ_DIR}/||"
echo "i> File system CPIO archive ${TARGET_ROOT_IFS_NAME##*/} is ready."

}


# *****************************************************************************
# Make a tarball for installing onto some disk partition(s).
# *****************************************************************************

rootfs_tarball() {

echo -n "i> Making a bzip'd tarball of the root file system ... "
rm --force "${TARGET_ROOT_TAR_NAME}"
tar	--directory="${TARGET_MNT_DIR}"	\
	--create			\
	--file="${TARGET_ROOT_TAR_NAME%.bz2}" .
bzip2 "${TARGET_ROOT_TAR_NAME%.bz2}"
echo "DONE"
ls -hl ${TARGET_ROOT_TAR_NAME} | sed --expression="s|${TARGET_PROJ_DIR}/||"
echo "i> File system tarball ${TARGET_ROOT_TAR_NAME##*/} is ready."

}


# *************************************************************************** #
#                                                                             #
# M A I N   P R O G R A M                                                     #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Set up the shell functions and environment variables.
# *****************************************************************************

source ./crosslinux-config.sh # target build configuration
source ${cl_libdir}/scripts/_constants.sh # build support
source ${cl_libdir}/scripts/_functions.sh # build support
CL_infoSigExit=1 # Print info on unexpected exit.

CL_config_setup || {
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
}


# *****************************************************************************
# Main Program
# *****************************************************************************

echo ""
echo "##### START making root file system image"

pushd "${TARGET_BLD_DIR}" >/dev/null 2>&1
rm --force TIME_STAMP
>TIME_STAMP

# Even with 'set +e' the trap handler will run if a command or shell function
# returns non-zero, and in that case the trap handler also will run when the
# subshell completes.  Set 'CL_exitOnSigErr' to zero to not let the trap
# handler exit the shell when the subsell returns an error so the return value
# can be checked and a message printed before exiting the shell; also don't
# print the backtrace info because it did that in the subshell.
#
set +e ; # Let a build step fail without exiting this script.
CL_infoOnSigErr=0
CL_exitOnSigErr=0
(
# The subshell's 'CL_infoOnSigErr' needs to be set so the trap handler will
# print a backtrace for the subshell, if a command or shell function returns
# non-zero.
CL_infoOnSigErr=1

_shareDir="${TARGET_MNT_DIR}/usr/share/${CONFIG_BRAND_NAME}"
_pkglst=""
_p=""

echo -n "i> Making package list ... "
for _p in $(ls ${TARGET_PKGBIN_DIR}); do
	if [[ x"${_p:0:18}" == x"crosslinux-basefs-" ]]; then
		_pkglst="${_p} ${_pkglst}"
	else
		_pkglst="${_pkglst} ${_p}"
	fi
done
echo "DONE"

echo -n "i> Installing packages into staging area ..."
rm --force --recursive "${TARGET_MNT_DIR}/"*
echo ""
for _p in ${_pkglst}; do
	_p=${_p%-${CONFIG_CPU_ARCH}.tbz}
	echo "=> ${_p}"
	cp "${TARGET_PKGBIN_DIR}/${_p}-${CONFIG_CPU_ARCH}.tbz" "${_p}.tar.bz2"
	bunzip2 --force "${_p}.tar.bz2"
	tar --extract --file="${_p}.tar" --directory=${TARGET_MNT_DIR}
	if [[ x"${_p#*-}" != x"nopackage" ]]; then
		tar --list --file="${_p}.tar" >"${_shareDir}/pkg-${_p}-FILES"
	fi
	rm --force "${_p}.tar"
done;
unset _p
unset _pkglst
unset _shareDir

echo -n "i> mklost+found ... "
(cd "${TARGET_MNT_DIR}"; mklost+found; ls -l)
echo "DONE"

echo -n "i> Updating birthdays ... "
find "${TARGET_MNT_DIR}" -type d -o -type f \
	-exec touch --reference=TIME_STAMP {} \;
echo "DONE"

_msg=""
if [[ -n "${CONFIG_ROOTFS_SIZE_MB:-}" ]]; then
	_msg=" [file system size=${CONFIG_ROOTFS_SIZE_MB}MB]"
fi
echo "File system usage${_msg}:"
du -sh ${TARGET_MNT_DIR}
unset _msg

if [[ x"${CONFIG_ROOTFS_INITRD:-}"    == x"y" ]]; then rootfs_initrd;    fi
if [[ x"${CONFIG_ROOTFS_INITRAMFS:-}" == x"y" ]]; then rootfs_initramfs; fi
if [[ x"${CONFIG_ROOTFS_TARBALL:-}"   == x"y" ]]; then rootfs_tarball;   fi

echo -n "i> Cleaning staging area ... "
rm --force --recursive "${TARGET_MNT_DIR}/"*
echo "DONE"
)
set -e ; # All done with build steps; enable exit on a non-zero status.
CL_infoOnSigErr=1
CL_exitOnSigErr=1

rm --force TIME_STAMP
popd >/dev/null 2>&1

echo "##### DONE making root file system image"
echo ""


# *****************************************************************************
# Exit with Status
# *****************************************************************************

CL_infoSigExit=0 # No info needed, because exit now is expected.
exit 0


# end of file
